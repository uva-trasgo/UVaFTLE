cmake_minimum_required (VERSION 3.8)


PROJECT(UVaFTLE C CXX)

set (CMAKE_C_COMPILER "clang++")
set(CMAKE_VERBOSE_MAKEFILE ON)
#SET DEFAULT INSTALL DIR
if (CMAKE_INSTALL_PREFIX STREQUAL "/usr/local")
	SET(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR})
endif()


#check if the symbolink links exists
#if(NOT EXISTS "CUDA/src/ftle.c")
	execute_process(COMMAND ln -s "$ENV{PWD}/CUDA/src/ftle.cu" "$ENV{PWD}/CUDA/src/ftle.c" OUTPUT_QUIET ERROR_QUIET)
	execute_process(COMMAND ln -s "$ENV{PWD}/CUDA/src/arithmetic.cu" "$ENV{PWD}/CUDA/src/arithmetic.c"  OUTPUT_QUIET ERROR_QUIET)
	execute_process(COMMAND ln -s "$ENV{PWD}/CUDA/src/preprocess.cu" "$ENV{PWD}/CUDA/src/preprocess.c"  OUTPUT_QUIET ERROR_QUIET)
	execute_process(COMMAND ln -s "$ENV{PWD}/CPU/src/ftle.cu" "$ENV{PWD}/CPU/src/ftle.c" OUTPUT_QUIET ERROR_QUIET)
	execute_process(COMMAND ln -s "$ENV{PWD}/CPU/src/arithmetic.cu" "$ENV{PWD}/CPU/src/arithmetic.c"  OUTPUT_QUIET ERROR_QUIET)
	execute_process(COMMAND ln -s "$ENV{PWD}/CPU/src/preprocess.cu" "$ENV{PWD}/CPU/src/preprocess.c" OUTPUT_QUIET ERROR_QUIET)
	execute_process(COMMAND ln -s "$ENV{PWD}/HIP/src/ftle.cpp" "$ENV{PWD}/HIP/src/ftle.c" OUTPUT_QUIET ERROR_QUIET)
	execute_process(COMMAND ln -s "$ENV{PWD}/HIP/src/arithmetic.cpp" "$ENV{PWD}/HIP/src/arithmetic.c" OUTPUT_QUIET ERROR_QUIET)
	execute_process(COMMAND ln -s "$ENV{PWD}/HIP/src/preprocess.cpp" "$ENV{PWD}/HIP/src/preprocess.c" OUTPUT_QUIET ERROR_QUIET)

#endif() 

#include(CheckLanguage)
#check_language(CUDA)

#if(NOT CMAKE_CUDA_COMPILER)
#	message(FATAL_ERROR "Can't find CUDA")
#endif()

find_package(OpenMP)

if(NOT OpenMP_C_FOUND)
        message(FATAL_ERROR "Can't find OpenMP")
endif()


#enable_language(CUDA)

SET(CUDA_PATH "/opt/cuda-12.4")
SET(CFLAGS "-O3")
SET(OMP_FLAGS "-fopenmp")

SET(CPU_AND_CUDA_DIR "CPU/src")
SET(CPU_AND_CUDA_SRC ${CPU_AND_CUDA_DIR}/ftle.c ${CPU_AND_CUDA_DIR}/preprocess.c ${CPU_AND_CUDA_DIR}/arithmetic.c )
SET(CPU_AND_CUDA_FLAGS "${CFLAGS} ${OMP_FLAGS} -std=c++17 -x cuda --cuda-gpu-arch=sm_70 -I./CPU/include -I${CUDA_PATH}/include -march=native -fPIE")
SET(CUDA_LINK_FLAGS "-L${CUDA_PATH}/lib64 -fopenmp") 

IF(WITH_ALL_VERSIONS STREQUAL "yes")
	SET(WITH_OMP "yes")
	SET(WITH_CUDA "yes")
	SET(WITH_ROCM "yes")
	SET(WITH_SYCL_OMP "yes")
	SET(WITH_SYCL_CUDA "yes")
	SET(WITH_SYCL_ROCM "yes")
	SET(WITH_SYCL_GENERIC "yes")
ENDIF()

IF(WITH_OMP STREQUAL "yes")
	IF(WITH_CUDA STREQUAL "yes")
		#CPU versions with GPU for Preprocessing
		ADD_EXECUTABLE(ftle_static  ${CPU_AND_CUDA_SRC})
		ADD_EXECUTABLE(ftle_dynamic ${CPU_AND_CUDA_SRC})
		ADD_EXECUTABLE(ftle_guided  ${CPU_AND_CUDA_SRC})

		SET_TARGET_PROPERTIES(ftle_static PROPERTIES COMPILE_FLAGS ${CPU_AND_CUDA_FLAGS})
		SET_TARGET_PROPERTIES(ftle_dynamic PROPERTIES COMPILE_FLAGS "${CPU_AND_CUDA_FLAGS} -DDYNAMIC")
		SET_TARGET_PROPERTIES(ftle_guided  PROPERTIES COMPILE_FLAGS "${CPU_AND_CUDA_FLAGS} -DGUIDED")
		SET_TARGET_PROPERTIES(ftle_guided ftle_dynamic ftle_static  PROPERTIES LINK_FLAGS "${CUDA_LINK_FLAGS}")



		TARGET_LINK_LIBRARIES(ftle_static  m  cudart_static rt dl stdc++)
		TARGET_LINK_LIBRARIES(ftle_dynamic m  cudart_static rt dl stdc++)
		TARGET_LINK_LIBRARIES(ftle_guided  m  cudart_static rt dl stdc++)
		INSTALL(TARGETS ftle_static ftle_dynamic ftle_guided  RUNTIME DESTINATION bin)
	ENDIF()

	#CPU ALONE versions 
	SET(CPU_DIR "CPU-alone/src")
	SET(CPU_SRC ${CPU_DIR}/ftle.c ${CPU_DIR}/preprocess.c ${CPU_DIR}/arithmetic.c )
	SET(CPU_FLAGS "${CFLAGS} ${OMP_FLAGS} -I./CPU-alone/include -march=native -fPIE")

	ADD_EXECUTABLE(ftle_static_alone  ${CPU_SRC})
	ADD_EXECUTABLE(ftle_dynamic_alone ${CPU_SRC})
	ADD_EXECUTABLE(ftle_guided_alone  ${CPU_SRC})

	SET_TARGET_PROPERTIES(ftle_static_alone PROPERTIES COMPILE_FLAGS ${CPU_FLAGS})
	SET_TARGET_PROPERTIES(ftle_dynamic_alone PROPERTIES COMPILE_FLAGS "${CPU_FLAGS} -DDYNAMIC")
	SET_TARGET_PROPERTIES(ftle_guided_alone  PROPERTIES COMPILE_FLAGS "${CPU_FLAGS} -DGUIDED")

	IF(CUDA_ARCH)
		SET_TARGET_PROPERTIES(ftle_static ftle_dynamic ftle_guided  PROPERTIES CUDA_ARCHITECTURES OFF)
	ENDIF()


	TARGET_LINK_LIBRARIES(ftle_static_alone  m)
	TARGET_LINK_LIBRARIES(ftle_dynamic_alone m)
	TARGET_LINK_LIBRARIES(ftle_guided_alone  m)
	SET_TARGET_PROPERTIES(ftle_guided_alone ftle_dynamic_alone ftle_static_alone  PROPERTIES LINK_FLAGS "-fopenmp")
	INSTALL(TARGETS ftle_guided_alone ftle_dynamic_alone ftle_static_alone RUNTIME DESTINATION bin)
	endif()

#CUDA VERSIONS
IF(WITH_CUDA STREQUAL "yes")
	SET(CUDA_DIR "CUDA/src")
	SET(CUDA_SRC ${CUDA_DIR}/ftle.c  ${CUDA_DIR}/preprocess.c ${CUDA_DIR}/arithmetic.c)
	SET(CUDA_FLAGS "${CFLAGS} ${OMP_FLAGS} -std=c++17 -I./CUDA/include -x cuda --cuda-gpu-arch=sm_70 -I${CUDA_PATH}/include -march=native")


	ADD_EXECUTABLE(ftle_cuda ${CUDA_SRC})
	ADD_EXECUTABLE(ftle_cuda_pin ${CUDA_SRC})
	ADD_EXECUTABLE(ftle_cuda_managed ${CUDA_SRC})
	SET_TARGET_PROPERTIES(ftle_cuda  PROPERTIES COMPILE_FLAGS ${CUDA_FLAGS})
	SET_TARGET_PROPERTIES(ftle_cuda_pin  PROPERTIES COMPILE_FLAGS "${CUDA_FLAGS} -DPINNED=1")
	SET_TARGET_PROPERTIES(ftle_cuda_managed  PROPERTIES COMPILE_FLAGS "${CUDA_FLAGS} -DMANAGED=1")
	SET_TARGET_PROPERTIES(ftle_cuda ftle_cuda_pin ftle_cuda_managed  PROPERTIES LINK_FLAGS ${CUDA_LINK_FLAGS})

	IF(CUDA_ARCH)
		SET_TARGET_PROPERTIES(ftle_cuda  PROPERTIES CUDA_ARCHITECTURES ${CUDA_ARCH})
		SET_TARGET_PROPERTIES(ftle_cuda_pin  PROPERTIES CUDA_ARCHITECTURES ${CUDA_ARCH})
		SET_TARGET_PROPERTIES(ftle_cuda_managed  PROPERTIES CUDA_ARCHITECTURES ${CUDA_ARCH})
	ENDIF()

	TARGET_LINK_LIBRARIES(ftle_cuda m  cudart_static rt dl stdc++)
	TARGET_LINK_LIBRARIES(ftle_cuda_pin m  cudart_static rt dl stdc++)
	TARGET_LINK_LIBRARIES(ftle_cuda_managed m  cudart_static rt dl stdc++)
	INSTALL(TARGETS ftle_cuda ftle_cuda_pin ftle_cuda_managed RUNTIME DESTINATION bin)
endif()


#ROCM
IF(WITH_ROCM STREQUAL "yes")
IF(NOT ROCM_DIR)
	SET(ROCM_DIR "/opt/rocm-6.1.0")
        message("-- SYCL with RoCM enabled but ROCM_DIR not specified. Setting by default to ${ROCM_DIR}")
ENDIF()

SET(HIP_DIR "HIP/src")
SET(HIP_SRC ${HIP_DIR}/ftle.c  ${HIP_DIR}/preprocess.c ${HIP_DIR}/arithmetic.c)
SET(HIP_FLAGS "${CFLAGS} ${OMP_FLAGS} -I./HIP/include -x hip --offload-arch=gfx900")


ADD_EXECUTABLE(ftle_hip ${HIP_SRC})
ADD_EXECUTABLE(ftle_hip_pin ${HIP_SRC})
ADD_EXECUTABLE(ftle_hip_managed ${HIP_SRC})
SET(HIP_LINK_FLAGS "-L${ROCM_DIR}/lib -fopenmp")

SET_TARGET_PROPERTIES(ftle_hip ftle_hip_pin ftle_hip_managed PROPERTIES COMPILE_FLAGS ${HIP_FLAGS}) 
SET_TARGET_PROPERTIES(ftle_hip_pin  PROPERTIES COMPILE_FLAGS "${HIP_FLAGS} -DPINNED=1")
SET_TARGET_PROPERTIES(ftle_hip_managed  PROPERTIES COMPILE_FLAGS "${HIP_FLAGS} -DMANAGED=1")
SET_TARGET_PROPERTIES(ftle_hip  ftle_hip_pin ftle_hip_managed  PROPERTIES LINK_FLAGS "${HIP_LINK_FLAGS}") 

TARGET_LINK_LIBRARIES(ftle_hip m amdhip64)
TARGET_LINK_LIBRARIES(ftle_hip_pin m amdhip64)
TARGET_LINK_LIBRARIES(ftle_hip_managed m amdhip64)

INSTALL(TARGETS ftle_hip ftle_hip_pin ftle_hip_managed RUNTIME DESTINATION bin)
ENDIF()



# SYCL Implementation

IF(WITH_SYCL_OMP STREQUAL "yes"  OR WITH_SYCL_CUDA STREQUAL "yes" OR WITH_SYCL_ROCM STREQUAL "yes" OR WITH_SYCL_GENERIC STREQUAL "yes")
	#NOTE FOR USERS: manually specify this vars editing CMakeLists.txt or
        #manually inicializate when cmake is invoked
	
	IF(NOT ADPCPP_DIR)
		message("-- SYCL enabled but ADPCCP_DIR  not specified. Setting by default to $ENV{HOME}/local/AdaptiveCPP")
		SET(ADPCPP_DIR "$ENV{HOME}/local/AdaptiveCPP")
	ENDIF()
	find_program(SYCL_CC "acpp")
	IF(NOT SYCL_CC)
		message(FATAL_ERROR "sycl compiler not found")
	ENDIF()
	set (CMAKE_CXX_COMPILER "${ADPCPP_DIR}/bin/acpp")
	set (CMAKE_CXX_LINKER "${ADPCPP_DIR}/bin/acpp")
	

	#NOTE FOR USERS: manually specify this vars editing CMakeLists.txt or
	#manually inicializate when cmake is invoked
	IF(NOT BOOST_DIR)
		message("-- SYCL enabled but BOOST_DIR not specified (required for CUDA and ROCM). Setting by default to $ENV{HOME}/local/boost")
		SET(BOOST_DIR "$ENV{HOME}/local/boost")
	ENDIF()

	SET(SYCL_DIR "SYCL")
	SET(USM_SHA_DIR "SYCL-usm-shared")
	SET(USM_DEV_DIR "SYCL-usm-device")
	SET(SYCL_SRCDIR "${SYCL_DIR}/src")
	SET(USM_SHA_SRCDIR "${USM_SHA_DIR}/src")
	SET(USM_DEV_SRCDIR "${USM_DEV_DIR}/src")
	SET(SYCL_SRC  ${SYCL_SRCDIR}/preprocess.cpp ${SYCL_SRCDIR}/arithmetic.cpp ${SYCL_SRCDIR}/ftle.cpp)
	SET(USM_SHA_SRC  ${USM_SHA_SRCDIR}/preprocess.cpp ${USM_SHA_SRCDIR}/arithmetic.cpp ${USM_SHA_SRCDIR}/ftle.cpp)
	SET(USM_DEV_SRC  ${USM_DEV_SRCDIR}/preprocess.cpp ${USM_DEV_SRCDIR}/arithmetic.cpp ${USM_DEV_SRCDIR}/ftle.cpp)

	IF(WITH_SYCL_OMP STREQUAL "yes")
		SET(SYCL_COMPILE_FLAGS "${CFLAGS} -march=native --acpp-targets='omp'  -DBLOCK=512")
		SET(SYCL_LINK_FLAGS "-lstdc++ -L${BOOST_DIR}/lib --acpp-targets='omp'  -lstdc++ -L${BOOST_DIR}/lib  -lm")
		ADD_EXECUTABLE(ftle_sycl_cpu  ${SYCL_SRC})
		ADD_EXECUTABLE(ftle_usm_sha_cpu ${USM_SHA_SRC})
		ADD_EXECUTABLE(ftle_usm_dev_cpu ${USM_DEV_SRC})
		SET_TARGET_PROPERTIES(ftle_sycl_cpu PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${SYCL_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_usm_sha_cpu PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${USM_SHA_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_usm_dev_cpu PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${USM_DEV_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_sycl_cpu ftle_usm_sha_cpu ftle_usm_dev_cpu  PROPERTIES LINK_FLAGS ${SYCL_LINK_FLAGS})
		INSTALL(TARGETS ftle_sycl_cpu ftle_usm_sha_cpu ftle_usm_dev_cpu RUNTIME DESTINATION bin)	
	ENDIF()
	
	#NOTE FOR USERS: Change the architecture sm_70 for other nvidia devices
	IF(WITH_SYCL_CUDA STREQUAL "yes")		
		SET(TARGETS "cuda:sm_70")		
		SET(SYCL_COMPILE_FLAGS "${CFLAGS}  --acpp-targets='${TARGETS}' -DCUDA_DEVICE -DBLOCK=512")
		SET(SYCL_LINK_FLAGS " -L${BOOST_DIR}/lib --acpp-targets='${TARGETS}'")
		ADD_EXECUTABLE(ftle_sycl_cuda  ${SYCL_SRC})
		ADD_EXECUTABLE(ftle_usm_sha_cuda ${USM_SHA_SRC})
		ADD_EXECUTABLE(ftle_usm_dev_cuda ${USM_DEV_SRC})
		SET_TARGET_PROPERTIES(ftle_sycl_cuda PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${SYCL_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_usm_sha_cuda  PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${USM_SHA_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_usm_dev_cuda  PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${USM_DEV_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_sycl_cuda ftle_usm_sha_cuda ftle_usm_dev_cuda PROPERTIES LINK_FLAGS "${SYCL_LINK_FLAGS}")
		INSTALL(TARGETS ftle_sycl_cuda ftle_usm_sha_cuda ftle_usm_dev_cuda RUNTIME DESTINATION bin)
	ENDIF()
	
	#NOTE FOR USERS: Change the architecture gfx900 for other amd devices
	IF(WITH_SYCL_ROCM STREQUAL "yes")
		SET(ROCM_COMMON_FLAGS "--rocm-path=${ROCM_DIR} --acpp-targets='hip:gfx900' -I${ROCM_DIR}/include -DHIP_DEVICE  -DBLOCK=512")
		SET(SYCL_COMPILE_FLAGS "${CFLAGS} ${ROCM_COMMON_FLAGS}")
		SET(SYCL_LINK_FLAGS "-lstdc++ -L${ROCM_DIR}/lib -L${ROCM_DIR}/lib64 -L${BOOST_DIR}/lib ${ROCM_COMMON_FLAGS} -lm")
		ADD_EXECUTABLE(ftle_sycl_rocm  ${SYCL_SRC})
		ADD_EXECUTABLE(ftle_usm_sha_rocm  ${USM_SHA_SRC})
		ADD_EXECUTABLE(ftle_usm_dev_rocm  ${USM_DEV_SRC})
		SET_TARGET_PROPERTIES(ftle_sycl_rocm PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${SYCL_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_usm_sha_rocm  PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${USM_SHA_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_usm_dev_rocm  PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${USM_DEV_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_sycl_rocm ftle_usm_sha_rocm ftle_usm_dev_rocm PROPERTIES LINK_FLAGS ${SYCL_LINK_FLAGS})
		INSTALL(TARGETS ftle_sycl_rocm ftle_usm_sha_rocm ftle_usm_dev_rocm RUNTIME DESTINATION bin)
	ENDIF()
	
	IF(WITH_SYCL_CUDA STREQUAL "yes" AND WITH_SYCL_ROCM STREQUAL "yes")
		SET(TARGETS "hip:gfx900;cuda:sm_70")
		SET(SYCL_COMPILE_FLAGS "${CFLAGS} --acpp-explicit-multipass -DGPU_ALL  -I${ROCM_DIR}/include/  -DBLOCK=512")
		SET(SYCL_LINK_FLAGS "-lstdc++ --acpp-explicit-multipass -L${BOOST_DIR}/lib  -L${ROCM_DIR}/lib -L${ROCM_DIR}/lib64 -L${BOOST_DIR}/lib ${ROCM_COMMON_FLAGS} -lm")
		ADD_EXECUTABLE(ftle_sycl_gpu  ${SYCL_SRC})
		ADD_EXECUTABLE(ftle_usm_dev_gpu  ${USM_DEV_SRC})
		SET_TARGET_PROPERTIES(ftle_sycl_gpu PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${SYCL_DIR}/include --acpp-targets='${TARGETS}'" )
		SET_TARGET_PROPERTIES(ftle_usm_dev_gpu PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${USM_DEV_DIR}/include --acpp-targets='${TARGETS}'")
		SET_TARGET_PROPERTIES(ftle_sycl_gpu ftle_usm_dev_gpu PROPERTIES LINK_FLAGS "${SYCL_LINK_FLAGS} --acpp-targets='${TARGETS}'")
		INSTALL(TARGETS ftle_sycl_gpu ftle_usm_dev_gpu RUNTIME DESTINATION bin)

	ENDIF()

	IF(WITH_SYCL_GENERIC STREQUAL "yes")
		SET(SYCL_COMPILE_FLAGS "${CFLAGS} -DGPU_ALL --acpp-targets='generic'  -I${ROCM_DIR}/hip/include/ -DBLOCK=512")
		SET(SYCL_LINK_FLAGS "-lstdc++ -L${BOOST_DIR}/lib --acpp-targets='generic'")
		ADD_EXECUTABLE(ftle_sycl_generic  ${SYCL_SRC})
		ADD_EXECUTABLE(ftle_usm_sha_generic  ${USM_SHA_SRC})
		ADD_EXECUTABLE(ftle_usm_dev_generic  ${USM_DEV_SRC})
		SET_TARGET_PROPERTIES(ftle_sycl_generic PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${SYCL_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_usm_sha_generic  PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${USM_SHA_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_usm_dev_generic  PROPERTIES COMPILE_FLAGS "${SYCL_COMPILE_FLAGS} -I./${USM_DEV_DIR}/include")
		SET_TARGET_PROPERTIES(ftle_sycl_generic ftle_usm_sha_generic ftle_usm_dev_generic PROPERTIES LINK_FLAGS ${SYCL_LINK_FLAGS})
		INSTALL(TARGETS ftle_sycl_generic ftle_usm_sha_generic ftle_usm_dev_generic RUNTIME DESTINATION bin)
	ENDIF()
ENDIF()
